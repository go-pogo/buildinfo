// Copyright (c) 2022, Roel Schut. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package gen

import (
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/go-pogo/errors"
)

var fileTmpl *template.Template = template.Must(template.New("").Parse(
	`// Code generated by "{{ .Caller }}"; DO NOT EDIT.

package {{ .Package }}

import "github.com/go-pogo/buildinfo"

func {{ .FuncName }}() *buildinfo.BuildInfo {
	return buildinfo.New("{{ .String }}")
}`))

// FileTemplate returns the template.Template that is used by GenerateFile.
func FileTemplate() *template.Template { return fileTmpl }

// GenerateFile tries to read
func GenerateFile(file string) (*Generator, error) {
	gen := New(GitTag, 1)
	file = filepath.Join(gen.Vars[CallerDirVar].(string), file)

	dir := filepath.Dir(file)
	if pkg := getPkgFromDir(dir); pkg != "" {
		gen.Vars[PackageVar] = pkg
	}
	if rel, err := filepath.Rel(dir, gen.Vars[CallerDirVar].(string)); err == nil && rel != "." {
		// make caller relative to generated file
		rel = filepath.Join(rel, gen.Vars[CallerVar].(string))
		gen.Vars[CallerVar] = "./" + strings.ReplaceAll(rel, "\\", "/")
	}

	f, err := os.Create(file)
	if err != nil {
		return nil, errors.WithStack(err)
	}

	return gen, gen.Execute(fileTmpl, f)
}

func getPkgFromDir(dir string) (res string) {
	pkgs, err := parser.ParseDir(token.NewFileSet(), dir, nil, parser.PackageClauseOnly|parser.SkipObjectResolution)
	if err != nil {
		return
	}

	dn := filepath.Base(dir)
	if pkg, ok := pkgs[dn]; ok {
		return pkg.Name
	}

	f := 0
	n := len(pkgs)
	for _, pkg := range pkgs {
		if n == 1 {
			return pkg.Name
		}
		if len(pkg.Files) > f {
			res = pkg.Name
		}
	}
	return
}
